#!/usr/bin/env python3
"""
Test de sant√© de l'API
- V√©rifier que tous les endpoints fonctionnent
- Tester la documentation Swagger/ReDoc
- Identifier les probl√®mes √©ventuels
"""

import requests
import json

BASE_URL = "http://127.0.0.1:8000"

def test_basic_endpoints():
    """Test des endpoints de base."""
    print("üîç TEST ENDPOINTS DE BASE")
    print("=" * 30)
    
    endpoints = [
        ("/admin/", "Admin Django"),
        ("/api/", "API Root"),
        ("/swagger/", "Swagger UI"),
        ("/redoc/", "ReDoc"),
        ("/swagger.json", "Swagger JSON"),
    ]
    
    results = {}
    
    for endpoint, name in endpoints:
        try:
            response = requests.get(f"{BASE_URL}{endpoint}", timeout=10)
            status = response.status_code
            print(f"   {name}: {status}")
            results[endpoint] = status
            
            if status == 200:
                print(f"      ‚úÖ {name} fonctionne")
            elif status == 404:
                print(f"      ‚ö†Ô∏è  {name} non trouv√©")
            elif status == 500:
                print(f"      ‚ùå {name} erreur serveur")
            else:
                print(f"      ‚ö†Ô∏è  {name} statut inattendu: {status}")
                
        except requests.exceptions.ConnectionError:
            print(f"   {name}: ‚ùå Connexion impossible")
            results[endpoint] = "CONNECTION_ERROR"
        except requests.exceptions.Timeout:
            print(f"   {name}: ‚ùå Timeout")
            results[endpoint] = "TIMEOUT"
        except Exception as e:
            print(f"   {name}: ‚ùå Erreur: {e}")
            results[endpoint] = "ERROR"
    
    return results

def test_api_endpoints():
    """Test des endpoints API sp√©cifiques."""
    print(f"\nüîç TEST ENDPOINTS API")
    print("=" * 25)
    
    api_endpoints = [
        ("/api/entreprises/", "Entreprises"),
        ("/api/users/", "Utilisateurs"),
        ("/api/boutiques/", "Boutiques"),
        ("/api/produits/", "Produits"),
        ("/api/factures/", "Factures"),
        ("/api/auth/jwt/login/", "JWT Login"),
    ]
    
    results = {}
    
    for endpoint, name in api_endpoints:
        try:
            response = requests.get(f"{BASE_URL}{endpoint}", timeout=10)
            status = response.status_code
            print(f"   {name}: {status}")
            results[endpoint] = status
            
            if status == 200:
                print(f"      ‚úÖ {name} accessible")
            elif status == 401:
                print(f"      üîí {name} n√©cessite authentification")
            elif status == 403:
                print(f"      üö´ {name} acc√®s refus√©")
            elif status == 404:
                print(f"      ‚ö†Ô∏è  {name} non trouv√©")
            elif status == 500:
                print(f"      ‚ùå {name} erreur serveur")
            else:
                print(f"      ‚ö†Ô∏è  {name} statut: {status}")
                
        except requests.exceptions.ConnectionError:
            print(f"   {name}: ‚ùå Connexion impossible")
            results[endpoint] = "CONNECTION_ERROR"
        except Exception as e:
            print(f"   {name}: ‚ùå Erreur: {e}")
            results[endpoint] = "ERROR"
    
    return results

def test_swagger_documentation():
    """Test sp√©cifique de la documentation Swagger."""
    print(f"\nüìö TEST DOCUMENTATION SWAGGER")
    print("=" * 35)
    
    swagger_endpoints = [
        ("/swagger.json", "Swagger JSON Schema"),
        ("/swagger.yaml", "Swagger YAML Schema"),
        ("/redoc/?format=openapi", "ReDoc OpenAPI"),
    ]
    
    results = {}
    
    for endpoint, name in swagger_endpoints:
        try:
            response = requests.get(f"{BASE_URL}{endpoint}", timeout=10)
            status = response.status_code
            print(f"   {name}: {status}")
            results[endpoint] = status
            
            if status == 200:
                print(f"      ‚úÖ {name} accessible")
                # V√©rifier le contenu
                if 'json' in endpoint:
                    try:
                        data = response.json()
                        print(f"         üìÑ Contenu JSON valide")
                    except:
                        print(f"         ‚ùå Contenu JSON invalide")
            elif status == 500:
                print(f"      ‚ùå {name} erreur serveur - Probl√®me de configuration")
            else:
                print(f"      ‚ö†Ô∏è  {name} statut: {status}")
                
        except requests.exceptions.ConnectionError:
            print(f"   {name}: ‚ùå Connexion impossible")
            results[endpoint] = "CONNECTION_ERROR"
        except Exception as e:
            print(f"   {name}: ‚ùå Erreur: {e}")
            results[endpoint] = "ERROR"
    
    return results

def test_server_health():
    """Test g√©n√©ral de sant√© du serveur."""
    print(f"\nüè• TEST SANT√â SERVEUR")
    print("=" * 25)
    
    try:
        # Test de base
        response = requests.get(f"{BASE_URL}/admin/", timeout=5)
        if response.status_code == 200:
            print("   ‚úÖ Serveur Django fonctionne")
            return True
        else:
            print(f"   ‚ö†Ô∏è  Serveur r√©pond avec statut: {response.status_code}")
            return False
    except requests.exceptions.ConnectionError:
        print("   ‚ùå Serveur non accessible")
        return False
    except Exception as e:
        print(f"   ‚ùå Erreur serveur: {e}")
        return False

def main():
    print("üöÄ TEST SANT√â API COMPLET")
    print("=" * 35)
    
    # 1. Test de sant√© du serveur
    server_ok = test_server_health()
    if not server_ok:
        print("\n‚ùå Serveur non accessible - Arr√™t des tests")
        return
    
    # 2. Tests des endpoints de base
    basic_results = test_basic_endpoints()
    
    # 3. Tests des endpoints API
    api_results = test_api_endpoints()
    
    # 4. Tests de la documentation
    swagger_results = test_swagger_documentation()
    
    # 5. R√©sum√©
    print(f"\nüìä R√âSUM√â DES TESTS")
    print("=" * 25)
    
    # Compter les succ√®s
    total_tests = len(basic_results) + len(api_results) + len(swagger_results)
    success_count = 0
    
    for results in [basic_results, api_results, swagger_results]:
        for endpoint, status in results.items():
            if status == 200:
                success_count += 1
    
    print(f"   üìà Tests r√©ussis: {success_count}/{total_tests}")
    
    # Identifier les probl√®mes
    problems = []
    for results in [basic_results, api_results, swagger_results]:
        for endpoint, status in results.items():
            if status == 500:
                problems.append(f"Erreur 500 sur {endpoint}")
            elif status == "CONNECTION_ERROR":
                problems.append(f"Connexion impossible sur {endpoint}")
    
    if problems:
        print(f"\n‚ö†Ô∏è  PROBL√àMES IDENTIFI√âS:")
        for problem in problems:
            print(f"   - {problem}")
    else:
        print(f"\nüéâ AUCUN PROBL√àME MAJEUR D√âTECT√â!")
    
    # Recommandations
    print(f"\nüí° RECOMMANDATIONS:")
    if any(status == 500 for results in [basic_results, api_results, swagger_results] for status in results.values()):
        print("   - V√©rifier les logs Django pour les erreurs 500")
        print("   - V√©rifier la configuration des serializers")
        print("   - V√©rifier les migrations de base de donn√©es")
    
    if any(status == "CONNECTION_ERROR" for results in [basic_results, api_results, swagger_results] for status in results.values()):
        print("   - V√©rifier que le serveur Django est d√©marr√©")
        print("   - V√©rifier l'URL et le port (127.0.0.1:8000)")

if __name__ == "__main__":
    main()































